   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"potentiometer.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	1
  22              		.global	reading_potentiometer
  23              		.thumb
  24              		.thumb_func
  25              		.type	reading_potentiometer, %function
  26              	reading_potentiometer:
  27              	.LFB398:
  28              		.file 1 "src/sys/potentiometer.c"
   1:src/sys/potentiometer.c **** #include <stdio.h>
   2:src/sys/potentiometer.c **** #include "sys/devices.h"
   3:src/sys/potentiometer.c **** 
   4:src/sys/potentiometer.c **** uint32_t reading_potentiometer() 
   5:src/sys/potentiometer.c **** {
  29              		.loc 1 5 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
   6:src/sys/potentiometer.c ****     
   7:src/sys/potentiometer.c ****     ADC1.SR = 0;
  34              		.loc 1 7 0
  35 0000 064B     		ldr	r3, .L6
  36 0002 0022     		movs	r2, #0
  37 0004 1A60     		str	r2, [r3]
   8:src/sys/potentiometer.c ****     ADC1.CR2 |= (1 << 30);  /* Start conversion */
  38              		.loc 1 8 0
  39 0006 9A68     		ldr	r2, [r3, #8]
  40 0008 42F08042 		orr	r2, r2, #1073741824
  41 000c 9A60     		str	r2, [r3, #8]
  42              	.L2:
   9:src/sys/potentiometer.c ****     
  10:src/sys/potentiometer.c ****     while((ADC1.SR & 0x22) == 0); /* Looking for eoc and overrun */
  43              		.loc 1 10 0 discriminator 1
  44 000e 1A68     		ldr	r2, [r3]
  45 0010 12F0220F 		tst	r2, #34
  46 0014 FBD0     		beq	.L2
  11:src/sys/potentiometer.c ****         
  12:src/sys/potentiometer.c ****     return ADC1.DR; /* Return the value of the potentiometer */
  47              		.loc 1 12 0
  48 0016 014B     		ldr	r3, .L6
  49 0018 D86C     		ldr	r0, [r3, #76]
  13:src/sys/potentiometer.c ****     
  14:src/sys/potentiometer.c **** }
  50              		.loc 1 14 0
  51 001a 7047     		bx	lr
  52              	.L7:
  53              		.align	2
  54              	.L6:
  55 001c 00000000 		.word	ADC1
  56              		.cfi_endproc
  57              	.LFE398:
  58              		.size	reading_potentiometer, .-reading_potentiometer
  59              		.align	1
  60              		.global	modify_volume_potentiometer
  61              		.thumb
  62              		.thumb_func
  63              		.type	modify_volume_potentiometer, %function
  64              	modify_volume_potentiometer:
  65              	.LFB399:
  15:src/sys/potentiometer.c **** 
  16:src/sys/potentiometer.c **** void modify_volume_potentiometer() /* This function modifies the actual volume of the music box */
  17:src/sys/potentiometer.c **** {
  66              		.loc 1 17 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0020 08B5     		push	{r3, lr}
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 3, -8
  73              		.cfi_offset 14, -4
  18:src/sys/potentiometer.c ****     uint32_t volume = reading_potentiometer(); /* Storing the value of the potentiometer in a varia
  74              		.loc 1 18 0
  75 0022 FFF7FEFF 		bl	reading_potentiometer
  76              	.LVL0:
  19:src/sys/potentiometer.c ****     
  20:src/sys/potentiometer.c ****     /* For this part we used USART2 in order to see at which values, the sound quality remains high
  21:src/sys/potentiometer.c ****      after a certain value the sound is mute. We used this observation to have volume 0 if wanted *
  22:src/sys/potentiometer.c ****     
  23:src/sys/potentiometer.c ****     if(volume > 4090)   
  77              		.loc 1 23 0
  78 0026 40F6FA73 		movw	r3, #4090
  79 002a 9842     		cmp	r0, r3
  80 002c 05D8     		bhi	.L10
  24:src/sys/potentiometer.c ****         {
  25:src/sys/potentiometer.c ****             volume = 5;
  26:src/sys/potentiometer.c ****         }
  27:src/sys/potentiometer.c ****     else if(volume < 450)
  81              		.loc 1 27 0
  82 002e B0F5E17F 		cmp	r0, #450
  28:src/sys/potentiometer.c ****         {
  29:src/sys/potentiometer.c ****             volume = 450;
  83              		.loc 1 29 0
  84 0032 38BF     		it	cc
  85 0034 4FF4E170 		movcc	r0, #450
  86              	.LVL1:
  87 0038 00E0     		b	.L9
  88              	.LVL2:
  89              	.L10:
  25:src/sys/potentiometer.c ****         }
  90              		.loc 1 25 0
  91 003a 0520     		movs	r0, #5
  92              	.LVL3:
  93              	.L9:
  30:src/sys/potentiometer.c ****         }
  31:src/sys/potentiometer.c ****         
  32:src/sys/potentiometer.c ****     volume = volume / 20;
  33:src/sys/potentiometer.c ****     
  34:src/sys/potentiometer.c ****     /*
  35:src/sys/potentiometer.c ****         Another version of working volume modifier:
  36:src/sys/potentiometer.c ****         
  37:src/sys/potentiometer.c ****         uint32_t min = 500;
  38:src/sys/potentiometer.c ****         volume = ((min - 2) * volume / 4096) + 2;
  39:src/sys/potentiometer.c ****     
  40:src/sys/potentiometer.c ****      */
  41:src/sys/potentiometer.c ****     
  42:src/sys/potentiometer.c ****     TIM2.CCR2 = TIM2.ARR / volume; /* Modify the value of the CCR2 and thus the volume of the board
  94              		.loc 1 42 0
  95 003c 044A     		ldr	r2, .L11
  96 003e 1421     		movs	r1, #20
  97 0040 D36A     		ldr	r3, [r2, #44]
  98 0042 B0FBF1F0 		udiv	r0, r0, r1
  99              	.LVL4:
 100 0046 B3FBF0F0 		udiv	r0, r3, r0
 101              	.LVL5:
 102 004a 9063     		str	r0, [r2, #56]
 103 004c 08BD     		pop	{r3, pc}
 104              	.L12:
 105 004e 00BF     		.align	2
 106              	.L11:
 107 0050 00000000 		.word	TIM2
 108              		.cfi_endproc
 109              	.LFE399:
 110              		.size	modify_volume_potentiometer, .-modify_volume_potentiometer
 111              		.align	1
 112              		.global	setup_ADC
 113              		.thumb
 114              		.thumb_func
 115              		.type	setup_ADC, %function
 116              	setup_ADC:
 117              	.LFB400:
  43:src/sys/potentiometer.c **** 
  44:src/sys/potentiometer.c **** }
  45:src/sys/potentiometer.c **** 
  46:src/sys/potentiometer.c **** void setup_ADC() /* This function prepares ADC1 for usage. We need it to convert the values of the 
  47:src/sys/potentiometer.c **** {
 118              		.loc 1 47 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LBB14:
 124              	.LBB15:
 125              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM ยง4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM ยง4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM ยง4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM ยง4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM ยง4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM ยง3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM ยง4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM ยง5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM ยง6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM ยง7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM ยง8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM ยง9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   volatile void* PAR;
 180:src/sys/devices.h ****   volatile void* M0AR;
 181:src/sys/devices.h ****   volatile void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM ยง10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM ยง11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM ยง12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM ยง13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM ยง14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM ยง15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM ยง16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM ยง17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM ยง18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM ยง18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM ยง19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM ยง20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM ยง21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM ยง22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM ยง23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM ยง24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM ยง25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM ยง26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM ยง27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM ยง28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM ยง29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM ยง30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM ยง32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM ยง32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM ยง33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 677:src/sys/devices.h **** __declare_device_control(SPI4,APB2,13)
 678:src/sys/devices.h **** __declare_device_control(SPI1,APB2,12)
 679:src/sys/devices.h **** __declare_device_control(SDMMC,APB2,11)
 680:src/sys/devices.h **** __declare_device_control(ADC,APB2,8)
 681:src/sys/devices.h **** __declare_device_control(ADC1,APB2,8)
 126              		.loc 2 681 0
 127 0054 114A     		ldr	r2, .L14
 128 0056 536C     		ldr	r3, [r2, #68]
 129 0058 43F48073 		orr	r3, r3, #256
 130 005c 5364     		str	r3, [r2, #68]
 131              	.LBB16:
 132              	.LBB17:
 133              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 134              		.loc 3 428 0
 135              		.syntax unified
 136              	@ 428 "src/sys/cmsis_gcc.h" 1
 137 005e BFF34F8F 		dsb 0xF
 138              	@ 0 "" 2
 139              		.thumb
 140              		.syntax unified
 141              	.LBE17:
 142              	.LBE16:
 143              	.LBE15:
 144              	.LBE14:
  48:src/sys/potentiometer.c ****     enable_ADC1();
  49:src/sys/potentiometer.c ****     
  50:src/sys/potentiometer.c ****     ADC1.CR2 |= 1; /* Enabling ADC */ 
 145              		.loc 1 50 0
 146 0062 0F4B     		ldr	r3, .L14+4
  51:src/sys/potentiometer.c ****     ADC1.SR = 0;   /* Initializing SR with 0 */ 
  52:src/sys/potentiometer.c ****     ADC_common.CCR = (ADC_common.CCR & ~(0b11 << 16)) | (0b01 << 16); /* We divide the clock by 4 t
 147              		.loc 1 52 0
 148 0064 0F49     		ldr	r1, .L14+8
  50:src/sys/potentiometer.c ****     ADC1.SR = 0;   /* Initializing SR with 0 */ 
 149              		.loc 1 50 0
 150 0066 9A68     		ldr	r2, [r3, #8]
 151 0068 42F00102 		orr	r2, r2, #1
 152 006c 9A60     		str	r2, [r3, #8]
  51:src/sys/potentiometer.c ****     ADC1.SR = 0;   /* Initializing SR with 0 */ 
 153              		.loc 1 51 0
 154 006e 0022     		movs	r2, #0
 155 0070 1A60     		str	r2, [r3]
 156              		.loc 1 52 0
 157 0072 4A68     		ldr	r2, [r1, #4]
 158 0074 22F44032 		bic	r2, r2, #196608
 159 0078 42F48032 		orr	r2, r2, #65536
 160 007c 4A60     		str	r2, [r1, #4]
  53:src/sys/potentiometer.c ****     ADC1.SMPR2 = ADC1.SMPR2 | (0b111 << 24);         /* 480 cycles */ 
 161              		.loc 1 53 0
 162 007e 1A69     		ldr	r2, [r3, #16]
 163 0080 42F0E062 		orr	r2, r2, #117440512
 164 0084 1A61     		str	r2, [r3, #16]
  54:src/sys/potentiometer.c ****     
  55:src/sys/potentiometer.c ****     ADC1.SQR3 = (ADC1.SQR3 & ~(0b1111)) | (0b1000);  /* Setup the channel for PB0 - Potentiometer *
 165              		.loc 1 55 0
 166 0086 5A6B     		ldr	r2, [r3, #52]
 167 0088 22F00F02 		bic	r2, r2, #15
 168 008c 42F00802 		orr	r2, r2, #8
 169 0090 5A63     		str	r2, [r3, #52]
  56:src/sys/potentiometer.c ****     ADC1.SQR1 = ADC1.SQR1 & ~(0b1111 << 20);         /* 16 conversions in the regular channel */
 170              		.loc 1 56 0
 171 0092 DA6A     		ldr	r2, [r3, #44]
 172 0094 22F47002 		bic	r2, r2, #15728640
 173 0098 DA62     		str	r2, [r3, #44]
 174 009a 7047     		bx	lr
 175              	.L15:
 176              		.align	2
 177              	.L14:
 178 009c 00000000 		.word	RCC
 179 00a0 00000000 		.word	ADC1
 180 00a4 00000000 		.word	ADC_common
 181              		.cfi_endproc
 182              	.LFE400:
 183              		.size	setup_ADC, .-setup_ADC
 184              		.align	1
 185              		.global	configuration_potentiometre_PB0
 186              		.thumb
 187              		.thumb_func
 188              		.type	configuration_potentiometre_PB0, %function
 189              	configuration_potentiometre_PB0:
 190              	.LFB401:
  57:src/sys/potentiometer.c ****     
  58:src/sys/potentiometer.c **** }
  59:src/sys/potentiometer.c **** 
  60:src/sys/potentiometer.c **** void configuration_potentiometre_PB0() /* Setting the potentiometer PB0 */
  61:src/sys/potentiometer.c **** {
 191              		.loc 1 61 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LBB18:
 197              	.LBB19:
 667:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 198              		.loc 2 667 0
 199 00a8 064A     		ldr	r2, .L17
 200 00aa 136B     		ldr	r3, [r2, #48]
 201 00ac 43F00203 		orr	r3, r3, #2
 202 00b0 1363     		str	r3, [r2, #48]
 203              	.LBB20:
 204              	.LBB21:
 205              		.loc 3 428 0
 206              		.syntax unified
 207              	@ 428 "src/sys/cmsis_gcc.h" 1
 208 00b2 BFF34F8F 		dsb 0xF
 209              	@ 0 "" 2
 210              		.thumb
 211              		.syntax unified
 212              	.LBE21:
 213              	.LBE20:
 214              	.LBE19:
 215              	.LBE18:
  62:src/sys/potentiometer.c ****     enable_GPIOB();
  63:src/sys/potentiometer.c ****     
  64:src/sys/potentiometer.c ****     GPIOB.MODER = GPIOB.MODER | (0b11);     /* Analog mode */
 216              		.loc 1 64 0
 217 00b6 044A     		ldr	r2, .L17+4
 218 00b8 1368     		ldr	r3, [r2]
 219 00ba 43F00303 		orr	r3, r3, #3
 220 00be 1360     		str	r3, [r2]
 221 00c0 7047     		bx	lr
 222              	.L18:
 223 00c2 00BF     		.align	2
 224              	.L17:
 225 00c4 00000000 		.word	RCC
 226 00c8 00000000 		.word	GPIOB
 227              		.cfi_endproc
 228              	.LFE401:
 229              		.size	configuration_potentiometre_PB0, .-configuration_potentiometre_PB0
 230              	.Letext0:
 231              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 232              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 233              		.section	.debug_info,"",%progbits
 234              	.Ldebug_info0:
 235 0000 5E060000 		.4byte	0x65e
 236 0004 0400     		.2byte	0x4
 237 0006 00000000 		.4byte	.Ldebug_abbrev0
 238 000a 04       		.byte	0x4
 239 000b 01       		.uleb128 0x1
 240 000c 0A000000 		.4byte	.LASF95
 241 0010 0C       		.byte	0xc
 242 0011 2D030000 		.4byte	.LASF96
 243 0015 66020000 		.4byte	.LASF97
 244 0019 00000000 		.4byte	.Ltext0
 245 001d CC000000 		.4byte	.Letext0-.Ltext0
 246 0021 00000000 		.4byte	.Ldebug_line0
 247 0025 02       		.uleb128 0x2
 248 0026 04       		.byte	0x4
 249 0027 07       		.byte	0x7
 250 0028 E9020000 		.4byte	.LASF0
 251 002c 02       		.uleb128 0x2
 252 002d 01       		.byte	0x1
 253 002e 06       		.byte	0x6
 254 002f E4030000 		.4byte	.LASF1
 255 0033 02       		.uleb128 0x2
 256 0034 01       		.byte	0x1
 257 0035 08       		.byte	0x8
 258 0036 58020000 		.4byte	.LASF2
 259 003a 02       		.uleb128 0x2
 260 003b 02       		.byte	0x2
 261 003c 05       		.byte	0x5
 262 003d EE000000 		.4byte	.LASF3
 263 0041 02       		.uleb128 0x2
 264 0042 02       		.byte	0x2
 265 0043 07       		.byte	0x7
 266 0044 84030000 		.4byte	.LASF4
 267 0048 02       		.uleb128 0x2
 268 0049 04       		.byte	0x4
 269 004a 05       		.byte	0x5
 270 004b EF010000 		.4byte	.LASF5
 271 004f 03       		.uleb128 0x3
 272 0050 C2030000 		.4byte	.LASF11
 273 0054 04       		.byte	0x4
 274 0055 41       		.byte	0x41
 275 0056 5A000000 		.4byte	0x5a
 276 005a 02       		.uleb128 0x2
 277 005b 04       		.byte	0x4
 278 005c 07       		.byte	0x7
 279 005d 9C030000 		.4byte	.LASF6
 280 0061 02       		.uleb128 0x2
 281 0062 08       		.byte	0x8
 282 0063 05       		.byte	0x5
 283 0064 D6010000 		.4byte	.LASF7
 284 0068 02       		.uleb128 0x2
 285 0069 08       		.byte	0x8
 286 006a 07       		.byte	0x7
 287 006b C9020000 		.4byte	.LASF8
 288 006f 04       		.uleb128 0x4
 289 0070 04       		.byte	0x4
 290 0071 05       		.byte	0x5
 291 0072 696E7400 		.ascii	"int\000"
 292 0076 02       		.uleb128 0x2
 293 0077 04       		.byte	0x4
 294 0078 07       		.byte	0x7
 295 0079 06040000 		.4byte	.LASF9
 296 007d 02       		.uleb128 0x2
 297 007e 01       		.byte	0x1
 298 007f 08       		.byte	0x8
 299 0080 DD000000 		.4byte	.LASF10
 300 0084 03       		.uleb128 0x3
 301 0085 E0020000 		.4byte	.LASF12
 302 0089 05       		.byte	0x5
 303 008a 30       		.byte	0x30
 304 008b 4F000000 		.4byte	0x4f
 305 008f 05       		.uleb128 0x5
 306 0090 14030000 		.4byte	.LASF48
 307 0094 98       		.byte	0x98
 308 0095 02       		.byte	0x2
 309 0096 68       		.byte	0x68
 310 0097 63020000 		.4byte	0x263
 311 009b 06       		.uleb128 0x6
 312 009c 435200   		.ascii	"CR\000"
 313 009f 02       		.byte	0x2
 314 00a0 69       		.byte	0x69
 315 00a1 84000000 		.4byte	0x84
 316 00a5 00       		.byte	0
 317 00a6 07       		.uleb128 0x7
 318 00a7 45030000 		.4byte	.LASF13
 319 00ab 02       		.byte	0x2
 320 00ac 6A       		.byte	0x6a
 321 00ad 84000000 		.4byte	0x84
 322 00b1 04       		.byte	0x4
 323 00b2 07       		.uleb128 0x7
 324 00b3 44010000 		.4byte	.LASF14
 325 00b7 02       		.byte	0x2
 326 00b8 6B       		.byte	0x6b
 327 00b9 84000000 		.4byte	0x84
 328 00bd 08       		.byte	0x8
 329 00be 06       		.uleb128 0x6
 330 00bf 43495200 		.ascii	"CIR\000"
 331 00c3 02       		.byte	0x2
 332 00c4 6C       		.byte	0x6c
 333 00c5 84000000 		.4byte	0x84
 334 00c9 0C       		.byte	0xc
 335 00ca 07       		.uleb128 0x7
 336 00cb 6F010000 		.4byte	.LASF15
 337 00cf 02       		.byte	0x2
 338 00d0 6D       		.byte	0x6d
 339 00d1 84000000 		.4byte	0x84
 340 00d5 10       		.byte	0x10
 341 00d6 07       		.uleb128 0x7
 342 00d7 F6020000 		.4byte	.LASF16
 343 00db 02       		.byte	0x2
 344 00dc 6E       		.byte	0x6e
 345 00dd 84000000 		.4byte	0x84
 346 00e1 14       		.byte	0x14
 347 00e2 07       		.uleb128 0x7
 348 00e3 57040000 		.4byte	.LASF17
 349 00e7 02       		.byte	0x2
 350 00e8 6F       		.byte	0x6f
 351 00e9 84000000 		.4byte	0x84
 352 00ed 18       		.byte	0x18
 353 00ee 07       		.uleb128 0x7
 354 00ef 61030000 		.4byte	.LASF18
 355 00f3 02       		.byte	0x2
 356 00f4 70       		.byte	0x70
 357 00f5 84000000 		.4byte	0x84
 358 00f9 1C       		.byte	0x1c
 359 00fa 07       		.uleb128 0x7
 360 00fb BD000000 		.4byte	.LASF19
 361 00ff 02       		.byte	0x2
 362 0100 71       		.byte	0x71
 363 0101 84000000 		.4byte	0x84
 364 0105 20       		.byte	0x20
 365 0106 07       		.uleb128 0x7
 366 0107 1B020000 		.4byte	.LASF20
 367 010b 02       		.byte	0x2
 368 010c 72       		.byte	0x72
 369 010d 84000000 		.4byte	0x84
 370 0111 24       		.byte	0x24
 371 0112 07       		.uleb128 0x7
 372 0113 48040000 		.4byte	.LASF21
 373 0117 02       		.byte	0x2
 374 0118 73       		.byte	0x73
 375 0119 84000000 		.4byte	0x84
 376 011d 28       		.byte	0x28
 377 011e 07       		.uleb128 0x7
 378 011f A2040000 		.4byte	.LASF22
 379 0123 02       		.byte	0x2
 380 0124 74       		.byte	0x74
 381 0125 84000000 		.4byte	0x84
 382 0129 2C       		.byte	0x2c
 383 012a 07       		.uleb128 0x7
 384 012b CD030000 		.4byte	.LASF23
 385 012f 02       		.byte	0x2
 386 0130 75       		.byte	0x75
 387 0131 84000000 		.4byte	0x84
 388 0135 30       		.byte	0x30
 389 0136 07       		.uleb128 0x7
 390 0137 C6000000 		.4byte	.LASF24
 391 013b 02       		.byte	0x2
 392 013c 76       		.byte	0x76
 393 013d 84000000 		.4byte	0x84
 394 0141 34       		.byte	0x34
 395 0142 07       		.uleb128 0x7
 396 0143 C6010000 		.4byte	.LASF25
 397 0147 02       		.byte	0x2
 398 0148 77       		.byte	0x77
 399 0149 84000000 		.4byte	0x84
 400 014d 38       		.byte	0x38
 401 014e 07       		.uleb128 0x7
 402 014f 49010000 		.4byte	.LASF26
 403 0153 02       		.byte	0x2
 404 0154 78       		.byte	0x78
 405 0155 84000000 		.4byte	0x84
 406 0159 3C       		.byte	0x3c
 407 015a 07       		.uleb128 0x7
 408 015b 67010000 		.4byte	.LASF27
 409 015f 02       		.byte	0x2
 410 0160 79       		.byte	0x79
 411 0161 84000000 		.4byte	0x84
 412 0165 40       		.byte	0x40
 413 0166 07       		.uleb128 0x7
 414 0167 AF020000 		.4byte	.LASF28
 415 016b 02       		.byte	0x2
 416 016c 7A       		.byte	0x7a
 417 016d 84000000 		.4byte	0x84
 418 0171 44       		.byte	0x44
 419 0172 07       		.uleb128 0x7
 420 0173 58010000 		.4byte	.LASF29
 421 0177 02       		.byte	0x2
 422 0178 7B       		.byte	0x7b
 423 0179 84000000 		.4byte	0x84
 424 017d 48       		.byte	0x48
 425 017e 07       		.uleb128 0x7
 426 017f B7010000 		.4byte	.LASF30
 427 0183 02       		.byte	0x2
 428 0184 7C       		.byte	0x7c
 429 0185 84000000 		.4byte	0x84
 430 0189 4C       		.byte	0x4c
 431 018a 07       		.uleb128 0x7
 432 018b 00000000 		.4byte	.LASF31
 433 018f 02       		.byte	0x2
 434 0190 7D       		.byte	0x7d
 435 0191 84000000 		.4byte	0x84
 436 0195 50       		.byte	0x50
 437 0196 07       		.uleb128 0x7
 438 0197 75030000 		.4byte	.LASF32
 439 019b 02       		.byte	0x2
 440 019c 7E       		.byte	0x7e
 441 019d 84000000 		.4byte	0x84
 442 01a1 54       		.byte	0x54
 443 01a2 07       		.uleb128 0x7
 444 01a3 2B010000 		.4byte	.LASF33
 445 01a7 02       		.byte	0x2
 446 01a8 7F       		.byte	0x7f
 447 01a9 84000000 		.4byte	0x84
 448 01ad 58       		.byte	0x58
 449 01ae 07       		.uleb128 0x7
 450 01af B3030000 		.4byte	.LASF34
 451 01b3 02       		.byte	0x2
 452 01b4 80       		.byte	0x80
 453 01b5 84000000 		.4byte	0x84
 454 01b9 5C       		.byte	0x5c
 455 01ba 07       		.uleb128 0x7
 456 01bb 52030000 		.4byte	.LASF35
 457 01bf 02       		.byte	0x2
 458 01c0 81       		.byte	0x81
 459 01c1 84000000 		.4byte	0x84
 460 01c5 60       		.byte	0x60
 461 01c6 07       		.uleb128 0x7
 462 01c7 98040000 		.4byte	.LASF36
 463 01cb 02       		.byte	0x2
 464 01cc 82       		.byte	0x82
 465 01cd 84000000 		.4byte	0x84
 466 01d1 64       		.byte	0x64
 467 01d2 07       		.uleb128 0x7
 468 01d3 F7030000 		.4byte	.LASF37
 469 01d7 02       		.byte	0x2
 470 01d8 83       		.byte	0x83
 471 01d9 84000000 		.4byte	0x84
 472 01dd 68       		.byte	0x68
 473 01de 07       		.uleb128 0x7
 474 01df AE000000 		.4byte	.LASF38
 475 01e3 02       		.byte	0x2
 476 01e4 84       		.byte	0x84
 477 01e5 84000000 		.4byte	0x84
 478 01e9 6C       		.byte	0x6c
 479 01ea 07       		.uleb128 0x7
 480 01eb F8000000 		.4byte	.LASF39
 481 01ef 02       		.byte	0x2
 482 01f0 85       		.byte	0x85
 483 01f1 84000000 		.4byte	0x84
 484 01f5 70       		.byte	0x70
 485 01f6 06       		.uleb128 0x6
 486 01f7 43535200 		.ascii	"CSR\000"
 487 01fb 02       		.byte	0x2
 488 01fc 86       		.byte	0x86
 489 01fd 84000000 		.4byte	0x84
 490 0201 74       		.byte	0x74
 491 0202 07       		.uleb128 0x7
 492 0203 06010000 		.4byte	.LASF40
 493 0207 02       		.byte	0x2
 494 0208 87       		.byte	0x87
 495 0209 84000000 		.4byte	0x84
 496 020d 78       		.byte	0x78
 497 020e 07       		.uleb128 0x7
 498 020f 9D010000 		.4byte	.LASF41
 499 0213 02       		.byte	0x2
 500 0214 88       		.byte	0x88
 501 0215 84000000 		.4byte	0x84
 502 0219 7C       		.byte	0x7c
 503 021a 07       		.uleb128 0x7
 504 021b 20010000 		.4byte	.LASF42
 505 021f 02       		.byte	0x2
 506 0220 89       		.byte	0x89
 507 0221 84000000 		.4byte	0x84
 508 0225 80       		.byte	0x80
 509 0226 07       		.uleb128 0x7
 510 0227 15010000 		.4byte	.LASF43
 511 022b 02       		.byte	0x2
 512 022c 8A       		.byte	0x8a
 513 022d 84000000 		.4byte	0x84
 514 0231 84       		.byte	0x84
 515 0232 07       		.uleb128 0x7
 516 0233 88040000 		.4byte	.LASF44
 517 0237 02       		.byte	0x2
 518 0238 8B       		.byte	0x8b
 519 0239 84000000 		.4byte	0x84
 520 023d 88       		.byte	0x88
 521 023e 07       		.uleb128 0x7
 522 023f 7F010000 		.4byte	.LASF45
 523 0243 02       		.byte	0x2
 524 0244 8C       		.byte	0x8c
 525 0245 84000000 		.4byte	0x84
 526 0249 8C       		.byte	0x8c
 527 024a 07       		.uleb128 0x7
 528 024b FD000000 		.4byte	.LASF46
 529 024f 02       		.byte	0x2
 530 0250 8D       		.byte	0x8d
 531 0251 84000000 		.4byte	0x84
 532 0255 90       		.byte	0x90
 533 0256 07       		.uleb128 0x7
 534 0257 0C020000 		.4byte	.LASF47
 535 025b 02       		.byte	0x2
 536 025c 8E       		.byte	0x8e
 537 025d 84000000 		.4byte	0x84
 538 0261 94       		.byte	0x94
 539 0262 00       		.byte	0
 540 0263 05       		.uleb128 0x5
 541 0264 D5030000 		.4byte	.LASF49
 542 0268 28       		.byte	0x28
 543 0269 02       		.byte	0x2
 544 026a 92       		.byte	0x92
 545 026b E8020000 		.4byte	0x2e8
 546 026f 07       		.uleb128 0x7
 547 0270 15020000 		.4byte	.LASF50
 548 0274 02       		.byte	0x2
 549 0275 93       		.byte	0x93
 550 0276 84000000 		.4byte	0x84
 551 027a 00       		.byte	0
 552 027b 07       		.uleb128 0x7
 553 027c 78010000 		.4byte	.LASF51
 554 0280 02       		.byte	0x2
 555 0281 94       		.byte	0x94
 556 0282 84000000 		.4byte	0x84
 557 0286 04       		.byte	0x4
 558 0287 07       		.uleb128 0x7
 559 0288 CE010000 		.4byte	.LASF52
 560 028c 02       		.byte	0x2
 561 028d 95       		.byte	0x95
 562 028e 84000000 		.4byte	0x84
 563 0292 08       		.byte	0x8
 564 0293 07       		.uleb128 0x7
 565 0294 E4010000 		.4byte	.LASF53
 566 0298 02       		.byte	0x2
 567 0299 96       		.byte	0x96
 568 029a 84000000 		.4byte	0x84
 569 029e 0C       		.byte	0xc
 570 029f 06       		.uleb128 0x6
 571 02a0 49445200 		.ascii	"IDR\000"
 572 02a4 02       		.byte	0x2
 573 02a5 97       		.byte	0x97
 574 02a6 84000000 		.4byte	0x84
 575 02aa 10       		.byte	0x10
 576 02ab 06       		.uleb128 0x6
 577 02ac 4F445200 		.ascii	"ODR\000"
 578 02b0 02       		.byte	0x2
 579 02b1 98       		.byte	0x98
 580 02b2 84000000 		.4byte	0x84
 581 02b6 14       		.byte	0x14
 582 02b7 07       		.uleb128 0x7
 583 02b8 07020000 		.4byte	.LASF54
 584 02bc 02       		.byte	0x2
 585 02bd 99       		.byte	0x99
 586 02be 84000000 		.4byte	0x84
 587 02c2 18       		.byte	0x18
 588 02c3 07       		.uleb128 0x7
 589 02c4 93040000 		.4byte	.LASF55
 590 02c8 02       		.byte	0x2
 591 02c9 9A       		.byte	0x9a
 592 02ca 84000000 		.4byte	0x84
 593 02ce 1C       		.byte	0x1c
 594 02cf 07       		.uleb128 0x7
 595 02d0 4D030000 		.4byte	.LASF56
 596 02d4 02       		.byte	0x2
 597 02d5 9B       		.byte	0x9b
 598 02d6 84000000 		.4byte	0x84
 599 02da 20       		.byte	0x20
 600 02db 07       		.uleb128 0x7
 601 02dc 28030000 		.4byte	.LASF57
 602 02e0 02       		.byte	0x2
 603 02e1 9C       		.byte	0x9c
 604 02e2 84000000 		.4byte	0x84
 605 02e6 24       		.byte	0x24
 606 02e7 00       		.byte	0
 607 02e8 05       		.uleb128 0x5
 608 02e9 35010000 		.4byte	.LASF58
 609 02ed 50       		.byte	0x50
 610 02ee 02       		.byte	0x2
 611 02ef F8       		.byte	0xf8
 612 02f0 F0030000 		.4byte	0x3f0
 613 02f4 06       		.uleb128 0x6
 614 02f5 535200   		.ascii	"SR\000"
 615 02f8 02       		.byte	0x2
 616 02f9 F9       		.byte	0xf9
 617 02fa 84000000 		.4byte	0x84
 618 02fe 00       		.byte	0
 619 02ff 06       		.uleb128 0x6
 620 0300 43523100 		.ascii	"CR1\000"
 621 0304 02       		.byte	0x2
 622 0305 FA       		.byte	0xfa
 623 0306 84000000 		.4byte	0x84
 624 030a 04       		.byte	0x4
 625 030b 06       		.uleb128 0x6
 626 030c 43523200 		.ascii	"CR2\000"
 627 0310 02       		.byte	0x2
 628 0311 FB       		.byte	0xfb
 629 0312 84000000 		.4byte	0x84
 630 0316 08       		.byte	0x8
 631 0317 07       		.uleb128 0x7
 632 0318 7C040000 		.4byte	.LASF59
 633 031c 02       		.byte	0x2
 634 031d FC       		.byte	0xfc
 635 031e 84000000 		.4byte	0x84
 636 0322 0C       		.byte	0xc
 637 0323 07       		.uleb128 0x7
 638 0324 82040000 		.4byte	.LASF60
 639 0328 02       		.byte	0x2
 640 0329 FD       		.byte	0xfd
 641 032a 84000000 		.4byte	0x84
 642 032e 10       		.byte	0x10
 643 032f 07       		.uleb128 0x7
 644 0330 36020000 		.4byte	.LASF61
 645 0334 02       		.byte	0x2
 646 0335 FE       		.byte	0xfe
 647 0336 84000000 		.4byte	0x84
 648 033a 14       		.byte	0x14
 649 033b 07       		.uleb128 0x7
 650 033c 3C020000 		.4byte	.LASF62
 651 0340 02       		.byte	0x2
 652 0341 FF       		.byte	0xff
 653 0342 84000000 		.4byte	0x84
 654 0346 18       		.byte	0x18
 655 0347 08       		.uleb128 0x8
 656 0348 42020000 		.4byte	.LASF63
 657 034c 02       		.byte	0x2
 658 034d 0001     		.2byte	0x100
 659 034f 84000000 		.4byte	0x84
 660 0353 1C       		.byte	0x1c
 661 0354 08       		.uleb128 0x8
 662 0355 48020000 		.4byte	.LASF64
 663 0359 02       		.byte	0x2
 664 035a 0101     		.2byte	0x101
 665 035c 84000000 		.4byte	0x84
 666 0360 20       		.byte	0x20
 667 0361 09       		.uleb128 0x9
 668 0362 48545200 		.ascii	"HTR\000"
 669 0366 02       		.byte	0x2
 670 0367 0201     		.2byte	0x102
 671 0369 84000000 		.4byte	0x84
 672 036d 24       		.byte	0x24
 673 036e 09       		.uleb128 0x9
 674 036f 4C545200 		.ascii	"LTR\000"
 675 0373 02       		.byte	0x2
 676 0374 0301     		.2byte	0x103
 677 0376 84000000 		.4byte	0x84
 678 037a 28       		.byte	0x28
 679 037b 08       		.uleb128 0x8
 680 037c 39040000 		.4byte	.LASF65
 681 0380 02       		.byte	0x2
 682 0381 0401     		.2byte	0x104
 683 0383 84000000 		.4byte	0x84
 684 0387 2C       		.byte	0x2c
 685 0388 08       		.uleb128 0x8
 686 0389 3E040000 		.4byte	.LASF66
 687 038d 02       		.byte	0x2
 688 038e 0501     		.2byte	0x105
 689 0390 84000000 		.4byte	0x84
 690 0394 30       		.byte	0x30
 691 0395 08       		.uleb128 0x8
 692 0396 43040000 		.4byte	.LASF67
 693 039a 02       		.byte	0x2
 694 039b 0601     		.2byte	0x106
 695 039d 84000000 		.4byte	0x84
 696 03a1 34       		.byte	0x34
 697 03a2 08       		.uleb128 0x8
 698 03a3 26010000 		.4byte	.LASF68
 699 03a7 02       		.byte	0x2
 700 03a8 0701     		.2byte	0x107
 701 03aa 84000000 		.4byte	0x84
 702 03ae 38       		.byte	0x38
 703 03af 08       		.uleb128 0x8
 704 03b0 70030000 		.4byte	.LASF69
 705 03b4 02       		.byte	0x2
 706 03b5 0801     		.2byte	0x108
 707 03b7 84000000 		.4byte	0x84
 708 03bb 3C       		.byte	0x3c
 709 03bc 08       		.uleb128 0x8
 710 03bd D3000000 		.4byte	.LASF70
 711 03c1 02       		.byte	0x2
 712 03c2 0901     		.2byte	0x109
 713 03c4 84000000 		.4byte	0x84
 714 03c8 40       		.byte	0x40
 715 03c9 08       		.uleb128 0x8
 716 03ca D8000000 		.4byte	.LASF71
 717 03ce 02       		.byte	0x2
 718 03cf 0A01     		.2byte	0x10a
 719 03d1 84000000 		.4byte	0x84
 720 03d5 44       		.byte	0x44
 721 03d6 08       		.uleb128 0x8
 722 03d7 24020000 		.4byte	.LASF72
 723 03db 02       		.byte	0x2
 724 03dc 0B01     		.2byte	0x10b
 725 03de 84000000 		.4byte	0x84
 726 03e2 48       		.byte	0x48
 727 03e3 09       		.uleb128 0x9
 728 03e4 445200   		.ascii	"DR\000"
 729 03e7 02       		.byte	0x2
 730 03e8 0C01     		.2byte	0x10c
 731 03ea 84000000 		.4byte	0x84
 732 03ee 4C       		.byte	0x4c
 733 03ef 00       		.byte	0
 734 03f0 0A       		.uleb128 0xa
 735 03f1 FF020000 		.4byte	.LASF73
 736 03f5 0C       		.byte	0xc
 737 03f6 02       		.byte	0x2
 738 03f7 0F01     		.2byte	0x10f
 739 03f9 25040000 		.4byte	0x425
 740 03fd 09       		.uleb128 0x9
 741 03fe 43535200 		.ascii	"CSR\000"
 742 0402 02       		.byte	0x2
 743 0403 1001     		.2byte	0x110
 744 0405 84000000 		.4byte	0x84
 745 0409 00       		.byte	0
 746 040a 09       		.uleb128 0x9
 747 040b 43435200 		.ascii	"CCR\000"
 748 040f 02       		.byte	0x2
 749 0410 1101     		.2byte	0x111
 750 0412 84000000 		.4byte	0x84
 751 0416 04       		.byte	0x4
 752 0417 09       		.uleb128 0x9
 753 0418 43445200 		.ascii	"CDR\000"
 754 041c 02       		.byte	0x2
 755 041d 1201     		.2byte	0x112
 756 041f 84000000 		.4byte	0x84
 757 0423 08       		.byte	0x8
 758 0424 00       		.byte	0
 759 0425 0A       		.uleb128 0xa
 760 0426 9F000000 		.4byte	.LASF74
 761 042a 54       		.byte	0x54
 762 042b 02       		.byte	0x2
 763 042c 3C01     		.2byte	0x13c
 764 042e 42050000 		.4byte	0x542
 765 0432 09       		.uleb128 0x9
 766 0433 43523100 		.ascii	"CR1\000"
 767 0437 02       		.byte	0x2
 768 0438 3D01     		.2byte	0x13d
 769 043a 84000000 		.4byte	0x84
 770 043e 00       		.byte	0
 771 043f 09       		.uleb128 0x9
 772 0440 43523200 		.ascii	"CR2\000"
 773 0444 02       		.byte	0x2
 774 0445 3E01     		.2byte	0x13e
 775 0447 84000000 		.4byte	0x84
 776 044b 04       		.byte	0x4
 777 044c 08       		.uleb128 0x8
 778 044d 4E020000 		.4byte	.LASF75
 779 0451 02       		.byte	0x2
 780 0452 3F01     		.2byte	0x13f
 781 0454 84000000 		.4byte	0x84
 782 0458 08       		.byte	0x8
 783 0459 08       		.uleb128 0x8
 784 045a 02020000 		.4byte	.LASF76
 785 045e 02       		.byte	0x2
 786 045f 4001     		.2byte	0x140
 787 0461 84000000 		.4byte	0x84
 788 0465 0C       		.byte	0xc
 789 0466 09       		.uleb128 0x9
 790 0467 535200   		.ascii	"SR\000"
 791 046a 02       		.byte	0x2
 792 046b 4101     		.2byte	0x141
 793 046d 84000000 		.4byte	0x84
 794 0471 10       		.byte	0x10
 795 0472 09       		.uleb128 0x9
 796 0473 45475200 		.ascii	"EGR\000"
 797 0477 02       		.byte	0x2
 798 0478 4201     		.2byte	0x142
 799 047a 84000000 		.4byte	0x84
 800 047e 14       		.byte	0x14
 801 047f 08       		.uleb128 0x8
 802 0480 E2000000 		.4byte	.LASF77
 803 0484 02       		.byte	0x2
 804 0485 4301     		.2byte	0x143
 805 0487 84000000 		.4byte	0x84
 806 048b 18       		.byte	0x18
 807 048c 08       		.uleb128 0x8
 808 048d E8000000 		.4byte	.LASF78
 809 0491 02       		.byte	0x2
 810 0492 4401     		.2byte	0x144
 811 0494 84000000 		.4byte	0x84
 812 0498 1C       		.byte	0x1c
 813 0499 08       		.uleb128 0x8
 814 049a AE030000 		.4byte	.LASF79
 815 049e 02       		.byte	0x2
 816 049f 4501     		.2byte	0x145
 817 04a1 84000000 		.4byte	0x84
 818 04a5 20       		.byte	0x20
 819 04a6 09       		.uleb128 0x9
 820 04a7 434E5400 		.ascii	"CNT\000"
 821 04ab 02       		.byte	0x2
 822 04ac 4601     		.2byte	0x146
 823 04ae 84000000 		.4byte	0x84
 824 04b2 24       		.byte	0x24
 825 04b3 09       		.uleb128 0x9
 826 04b4 50534300 		.ascii	"PSC\000"
 827 04b8 02       		.byte	0x2
 828 04b9 4701     		.2byte	0x147
 829 04bb 84000000 		.4byte	0x84
 830 04bf 28       		.byte	0x28
 831 04c0 09       		.uleb128 0x9
 832 04c1 41525200 		.ascii	"ARR\000"
 833 04c5 02       		.byte	0x2
 834 04c6 4801     		.2byte	0x148
 835 04c8 84000000 		.4byte	0x84
 836 04cc 2C       		.byte	0x2c
 837 04cd 09       		.uleb128 0x9
 838 04ce 52435200 		.ascii	"RCR\000"
 839 04d2 02       		.byte	0x2
 840 04d3 4901     		.2byte	0x149
 841 04d5 84000000 		.4byte	0x84
 842 04d9 30       		.byte	0x30
 843 04da 08       		.uleb128 0x8
 844 04db EA010000 		.4byte	.LASF80
 845 04df 02       		.byte	0x2
 846 04e0 4A01     		.2byte	0x14a
 847 04e2 84000000 		.4byte	0x84
 848 04e6 34       		.byte	0x34
 849 04e7 08       		.uleb128 0x8
 850 04e8 53020000 		.4byte	.LASF81
 851 04ec 02       		.byte	0x2
 852 04ed 4B01     		.2byte	0x14b
 853 04ef 84000000 		.4byte	0x84
 854 04f3 38       		.byte	0x38
 855 04f4 08       		.uleb128 0x8
 856 04f5 F8010000 		.4byte	.LASF82
 857 04f9 02       		.byte	0x2
 858 04fa 4C01     		.2byte	0x14c
 859 04fc 84000000 		.4byte	0x84
 860 0500 3C       		.byte	0x3c
 861 0501 08       		.uleb128 0x8
 862 0502 FD010000 		.4byte	.LASF83
 863 0506 02       		.byte	0x2
 864 0507 4D01     		.2byte	0x14d
 865 0509 84000000 		.4byte	0x84
 866 050d 40       		.byte	0x40
 867 050e 08       		.uleb128 0x8
 868 050f 5C030000 		.4byte	.LASF84
 869 0513 02       		.byte	0x2
 870 0514 4E01     		.2byte	0x14e
 871 0516 84000000 		.4byte	0x84
 872 051a 44       		.byte	0x44
 873 051b 09       		.uleb128 0x9
 874 051c 44435200 		.ascii	"DCR\000"
 875 0520 02       		.byte	0x2
 876 0521 4F01     		.2byte	0x14f
 877 0523 84000000 		.4byte	0x84
 878 0527 48       		.byte	0x48
 879 0528 08       		.uleb128 0x8
 880 0529 CE000000 		.4byte	.LASF85
 881 052d 02       		.byte	0x2
 882 052e 5001     		.2byte	0x150
 883 0530 84000000 		.4byte	0x84
 884 0534 4C       		.byte	0x4c
 885 0535 09       		.uleb128 0x9
 886 0536 4F5200   		.ascii	"OR\000"
 887 0539 02       		.byte	0x2
 888 053a 5101     		.2byte	0x151
 889 053c 84000000 		.4byte	0x84
 890 0540 50       		.byte	0x50
 891 0541 00       		.byte	0
 892 0542 0B       		.uleb128 0xb
 893 0543 C3020000 		.4byte	.LASF98
 894 0547 03       		.byte	0x3
 895 0548 AA01     		.2byte	0x1aa
 896 054a 03       		.byte	0x3
 897 054b 0C       		.uleb128 0xc
 898 054c B7020000 		.4byte	.LASF86
 899 0550 02       		.byte	0x2
 900 0551 A902     		.2byte	0x2a9
 901 0553 03       		.byte	0x3
 902 0554 0C       		.uleb128 0xc
 903 0555 29020000 		.4byte	.LASF87
 904 0559 02       		.byte	0x2
 905 055a 9B02     		.2byte	0x29b
 906 055c 03       		.byte	0x3
 907 055d 0D       		.uleb128 0xd
 908 055e 87010000 		.4byte	.LASF99
 909 0562 01       		.byte	0x1
 910 0563 04       		.byte	0x4
 911 0564 84000000 		.4byte	0x84
 912 0568 00000000 		.4byte	.LFB398
 913 056c 20000000 		.4byte	.LFE398-.LFB398
 914 0570 01       		.uleb128 0x1
 915 0571 9C       		.byte	0x9c
 916 0572 0E       		.uleb128 0xe
 917 0573 60040000 		.4byte	.LASF88
 918 0577 01       		.byte	0x1
 919 0578 10       		.byte	0x10
 920 0579 20000000 		.4byte	.LFB399
 921 057d 34000000 		.4byte	.LFE399-.LFB399
 922 0581 01       		.uleb128 0x1
 923 0582 9C       		.byte	0x9c
 924 0583 A0050000 		.4byte	0x5a0
 925 0587 0F       		.uleb128 0xf
 926 0588 F0030000 		.4byte	.LASF100
 927 058c 01       		.byte	0x1
 928 058d 12       		.byte	0x12
 929 058e 84000000 		.4byte	0x84
 930 0592 00000000 		.4byte	.LLST0
 931 0596 10       		.uleb128 0x10
 932 0597 26000000 		.4byte	.LVL0
 933 059b 5D050000 		.4byte	0x55d
 934 059f 00       		.byte	0
 935 05a0 0E       		.uleb128 0xe
 936 05a1 2F040000 		.4byte	.LASF89
 937 05a5 01       		.byte	0x1
 938 05a6 2E       		.byte	0x2e
 939 05a7 54000000 		.4byte	.LFB400
 940 05ab 54000000 		.4byte	.LFE400-.LFB400
 941 05af 01       		.uleb128 0x1
 942 05b0 9C       		.byte	0x9c
 943 05b1 D6050000 		.4byte	0x5d6
 944 05b5 11       		.uleb128 0x11
 945 05b6 4B050000 		.4byte	0x54b
 946 05ba 54000000 		.4byte	.LBB14
 947 05be 0E000000 		.4byte	.LBE14-.LBB14
 948 05c2 01       		.byte	0x1
 949 05c3 30       		.byte	0x30
 950 05c4 12       		.uleb128 0x12
 951 05c5 42050000 		.4byte	0x542
 952 05c9 5E000000 		.4byte	.LBB16
 953 05cd 04000000 		.4byte	.LBE16-.LBB16
 954 05d1 02       		.byte	0x2
 955 05d2 A902     		.2byte	0x2a9
 956 05d4 00       		.byte	0
 957 05d5 00       		.byte	0
 958 05d6 0E       		.uleb128 0xe
 959 05d7 0F040000 		.4byte	.LASF90
 960 05db 01       		.byte	0x1
 961 05dc 3C       		.byte	0x3c
 962 05dd A8000000 		.4byte	.LFB401
 963 05e1 24000000 		.4byte	.LFE401-.LFB401
 964 05e5 01       		.uleb128 0x1
 965 05e6 9C       		.byte	0x9c
 966 05e7 0C060000 		.4byte	0x60c
 967 05eb 11       		.uleb128 0x11
 968 05ec 54050000 		.4byte	0x554
 969 05f0 A8000000 		.4byte	.LBB18
 970 05f4 0E000000 		.4byte	.LBE18-.LBB18
 971 05f8 01       		.byte	0x1
 972 05f9 3E       		.byte	0x3e
 973 05fa 12       		.uleb128 0x12
 974 05fb 42050000 		.4byte	0x542
 975 05ff B2000000 		.4byte	.LBB20
 976 0603 04000000 		.4byte	.LBE20-.LBB20
 977 0607 02       		.byte	0x2
 978 0608 9B02     		.2byte	0x29b
 979 060a 00       		.byte	0
 980 060b 00       		.byte	0
 981 060c 13       		.uleb128 0x13
 982 060d 52434300 		.ascii	"RCC\000"
 983 0611 02       		.byte	0x2
 984 0612 3D02     		.2byte	0x23d
 985 0614 18060000 		.4byte	0x618
 986 0618 14       		.uleb128 0x14
 987 0619 8F000000 		.4byte	0x8f
 988 061d 15       		.uleb128 0x15
 989 061e 22030000 		.4byte	.LASF91
 990 0622 02       		.byte	0x2
 991 0623 4502     		.2byte	0x245
 992 0625 29060000 		.4byte	0x629
 993 0629 14       		.uleb128 0x14
 994 062a 63020000 		.4byte	0x263
 995 062e 15       		.uleb128 0x15
 996 062f 7F030000 		.4byte	.LASF92
 997 0633 02       		.byte	0x2
 998 0634 5302     		.2byte	0x253
 999 0636 3A060000 		.4byte	0x63a
 1000 063a 14       		.uleb128 0x14
 1001 063b E8020000 		.4byte	0x2e8
 1002 063f 15       		.uleb128 0x15
 1003 0640 AC010000 		.4byte	.LASF93
 1004 0644 02       		.byte	0x2
 1005 0645 5602     		.2byte	0x256
 1006 0647 4B060000 		.4byte	0x64b
 1007 064b 14       		.uleb128 0x14
 1008 064c F0030000 		.4byte	0x3f0
 1009 0650 15       		.uleb128 0x15
 1010 0651 97030000 		.4byte	.LASF94
 1011 0655 02       		.byte	0x2
 1012 0656 7702     		.2byte	0x277
 1013 0658 5C060000 		.4byte	0x65c
 1014 065c 14       		.uleb128 0x14
 1015 065d 25040000 		.4byte	0x425
 1016 0661 00       		.byte	0
 1017              		.section	.debug_abbrev,"",%progbits
 1018              	.Ldebug_abbrev0:
 1019 0000 01       		.uleb128 0x1
 1020 0001 11       		.uleb128 0x11
 1021 0002 01       		.byte	0x1
 1022 0003 25       		.uleb128 0x25
 1023 0004 0E       		.uleb128 0xe
 1024 0005 13       		.uleb128 0x13
 1025 0006 0B       		.uleb128 0xb
 1026 0007 03       		.uleb128 0x3
 1027 0008 0E       		.uleb128 0xe
 1028 0009 1B       		.uleb128 0x1b
 1029 000a 0E       		.uleb128 0xe
 1030 000b 11       		.uleb128 0x11
 1031 000c 01       		.uleb128 0x1
 1032 000d 12       		.uleb128 0x12
 1033 000e 06       		.uleb128 0x6
 1034 000f 10       		.uleb128 0x10
 1035 0010 17       		.uleb128 0x17
 1036 0011 00       		.byte	0
 1037 0012 00       		.byte	0
 1038 0013 02       		.uleb128 0x2
 1039 0014 24       		.uleb128 0x24
 1040 0015 00       		.byte	0
 1041 0016 0B       		.uleb128 0xb
 1042 0017 0B       		.uleb128 0xb
 1043 0018 3E       		.uleb128 0x3e
 1044 0019 0B       		.uleb128 0xb
 1045 001a 03       		.uleb128 0x3
 1046 001b 0E       		.uleb128 0xe
 1047 001c 00       		.byte	0
 1048 001d 00       		.byte	0
 1049 001e 03       		.uleb128 0x3
 1050 001f 16       		.uleb128 0x16
 1051 0020 00       		.byte	0
 1052 0021 03       		.uleb128 0x3
 1053 0022 0E       		.uleb128 0xe
 1054 0023 3A       		.uleb128 0x3a
 1055 0024 0B       		.uleb128 0xb
 1056 0025 3B       		.uleb128 0x3b
 1057 0026 0B       		.uleb128 0xb
 1058 0027 49       		.uleb128 0x49
 1059 0028 13       		.uleb128 0x13
 1060 0029 00       		.byte	0
 1061 002a 00       		.byte	0
 1062 002b 04       		.uleb128 0x4
 1063 002c 24       		.uleb128 0x24
 1064 002d 00       		.byte	0
 1065 002e 0B       		.uleb128 0xb
 1066 002f 0B       		.uleb128 0xb
 1067 0030 3E       		.uleb128 0x3e
 1068 0031 0B       		.uleb128 0xb
 1069 0032 03       		.uleb128 0x3
 1070 0033 08       		.uleb128 0x8
 1071 0034 00       		.byte	0
 1072 0035 00       		.byte	0
 1073 0036 05       		.uleb128 0x5
 1074 0037 13       		.uleb128 0x13
 1075 0038 01       		.byte	0x1
 1076 0039 03       		.uleb128 0x3
 1077 003a 0E       		.uleb128 0xe
 1078 003b 0B       		.uleb128 0xb
 1079 003c 0B       		.uleb128 0xb
 1080 003d 3A       		.uleb128 0x3a
 1081 003e 0B       		.uleb128 0xb
 1082 003f 3B       		.uleb128 0x3b
 1083 0040 0B       		.uleb128 0xb
 1084 0041 01       		.uleb128 0x1
 1085 0042 13       		.uleb128 0x13
 1086 0043 00       		.byte	0
 1087 0044 00       		.byte	0
 1088 0045 06       		.uleb128 0x6
 1089 0046 0D       		.uleb128 0xd
 1090 0047 00       		.byte	0
 1091 0048 03       		.uleb128 0x3
 1092 0049 08       		.uleb128 0x8
 1093 004a 3A       		.uleb128 0x3a
 1094 004b 0B       		.uleb128 0xb
 1095 004c 3B       		.uleb128 0x3b
 1096 004d 0B       		.uleb128 0xb
 1097 004e 49       		.uleb128 0x49
 1098 004f 13       		.uleb128 0x13
 1099 0050 38       		.uleb128 0x38
 1100 0051 0B       		.uleb128 0xb
 1101 0052 00       		.byte	0
 1102 0053 00       		.byte	0
 1103 0054 07       		.uleb128 0x7
 1104 0055 0D       		.uleb128 0xd
 1105 0056 00       		.byte	0
 1106 0057 03       		.uleb128 0x3
 1107 0058 0E       		.uleb128 0xe
 1108 0059 3A       		.uleb128 0x3a
 1109 005a 0B       		.uleb128 0xb
 1110 005b 3B       		.uleb128 0x3b
 1111 005c 0B       		.uleb128 0xb
 1112 005d 49       		.uleb128 0x49
 1113 005e 13       		.uleb128 0x13
 1114 005f 38       		.uleb128 0x38
 1115 0060 0B       		.uleb128 0xb
 1116 0061 00       		.byte	0
 1117 0062 00       		.byte	0
 1118 0063 08       		.uleb128 0x8
 1119 0064 0D       		.uleb128 0xd
 1120 0065 00       		.byte	0
 1121 0066 03       		.uleb128 0x3
 1122 0067 0E       		.uleb128 0xe
 1123 0068 3A       		.uleb128 0x3a
 1124 0069 0B       		.uleb128 0xb
 1125 006a 3B       		.uleb128 0x3b
 1126 006b 05       		.uleb128 0x5
 1127 006c 49       		.uleb128 0x49
 1128 006d 13       		.uleb128 0x13
 1129 006e 38       		.uleb128 0x38
 1130 006f 0B       		.uleb128 0xb
 1131 0070 00       		.byte	0
 1132 0071 00       		.byte	0
 1133 0072 09       		.uleb128 0x9
 1134 0073 0D       		.uleb128 0xd
 1135 0074 00       		.byte	0
 1136 0075 03       		.uleb128 0x3
 1137 0076 08       		.uleb128 0x8
 1138 0077 3A       		.uleb128 0x3a
 1139 0078 0B       		.uleb128 0xb
 1140 0079 3B       		.uleb128 0x3b
 1141 007a 05       		.uleb128 0x5
 1142 007b 49       		.uleb128 0x49
 1143 007c 13       		.uleb128 0x13
 1144 007d 38       		.uleb128 0x38
 1145 007e 0B       		.uleb128 0xb
 1146 007f 00       		.byte	0
 1147 0080 00       		.byte	0
 1148 0081 0A       		.uleb128 0xa
 1149 0082 13       		.uleb128 0x13
 1150 0083 01       		.byte	0x1
 1151 0084 03       		.uleb128 0x3
 1152 0085 0E       		.uleb128 0xe
 1153 0086 0B       		.uleb128 0xb
 1154 0087 0B       		.uleb128 0xb
 1155 0088 3A       		.uleb128 0x3a
 1156 0089 0B       		.uleb128 0xb
 1157 008a 3B       		.uleb128 0x3b
 1158 008b 05       		.uleb128 0x5
 1159 008c 01       		.uleb128 0x1
 1160 008d 13       		.uleb128 0x13
 1161 008e 00       		.byte	0
 1162 008f 00       		.byte	0
 1163 0090 0B       		.uleb128 0xb
 1164 0091 2E       		.uleb128 0x2e
 1165 0092 00       		.byte	0
 1166 0093 03       		.uleb128 0x3
 1167 0094 0E       		.uleb128 0xe
 1168 0095 3A       		.uleb128 0x3a
 1169 0096 0B       		.uleb128 0xb
 1170 0097 3B       		.uleb128 0x3b
 1171 0098 05       		.uleb128 0x5
 1172 0099 27       		.uleb128 0x27
 1173 009a 19       		.uleb128 0x19
 1174 009b 20       		.uleb128 0x20
 1175 009c 0B       		.uleb128 0xb
 1176 009d 00       		.byte	0
 1177 009e 00       		.byte	0
 1178 009f 0C       		.uleb128 0xc
 1179 00a0 2E       		.uleb128 0x2e
 1180 00a1 00       		.byte	0
 1181 00a2 03       		.uleb128 0x3
 1182 00a3 0E       		.uleb128 0xe
 1183 00a4 3A       		.uleb128 0x3a
 1184 00a5 0B       		.uleb128 0xb
 1185 00a6 3B       		.uleb128 0x3b
 1186 00a7 05       		.uleb128 0x5
 1187 00a8 20       		.uleb128 0x20
 1188 00a9 0B       		.uleb128 0xb
 1189 00aa 00       		.byte	0
 1190 00ab 00       		.byte	0
 1191 00ac 0D       		.uleb128 0xd
 1192 00ad 2E       		.uleb128 0x2e
 1193 00ae 00       		.byte	0
 1194 00af 3F       		.uleb128 0x3f
 1195 00b0 19       		.uleb128 0x19
 1196 00b1 03       		.uleb128 0x3
 1197 00b2 0E       		.uleb128 0xe
 1198 00b3 3A       		.uleb128 0x3a
 1199 00b4 0B       		.uleb128 0xb
 1200 00b5 3B       		.uleb128 0x3b
 1201 00b6 0B       		.uleb128 0xb
 1202 00b7 49       		.uleb128 0x49
 1203 00b8 13       		.uleb128 0x13
 1204 00b9 11       		.uleb128 0x11
 1205 00ba 01       		.uleb128 0x1
 1206 00bb 12       		.uleb128 0x12
 1207 00bc 06       		.uleb128 0x6
 1208 00bd 40       		.uleb128 0x40
 1209 00be 18       		.uleb128 0x18
 1210 00bf 9742     		.uleb128 0x2117
 1211 00c1 19       		.uleb128 0x19
 1212 00c2 00       		.byte	0
 1213 00c3 00       		.byte	0
 1214 00c4 0E       		.uleb128 0xe
 1215 00c5 2E       		.uleb128 0x2e
 1216 00c6 01       		.byte	0x1
 1217 00c7 3F       		.uleb128 0x3f
 1218 00c8 19       		.uleb128 0x19
 1219 00c9 03       		.uleb128 0x3
 1220 00ca 0E       		.uleb128 0xe
 1221 00cb 3A       		.uleb128 0x3a
 1222 00cc 0B       		.uleb128 0xb
 1223 00cd 3B       		.uleb128 0x3b
 1224 00ce 0B       		.uleb128 0xb
 1225 00cf 11       		.uleb128 0x11
 1226 00d0 01       		.uleb128 0x1
 1227 00d1 12       		.uleb128 0x12
 1228 00d2 06       		.uleb128 0x6
 1229 00d3 40       		.uleb128 0x40
 1230 00d4 18       		.uleb128 0x18
 1231 00d5 9742     		.uleb128 0x2117
 1232 00d7 19       		.uleb128 0x19
 1233 00d8 01       		.uleb128 0x1
 1234 00d9 13       		.uleb128 0x13
 1235 00da 00       		.byte	0
 1236 00db 00       		.byte	0
 1237 00dc 0F       		.uleb128 0xf
 1238 00dd 34       		.uleb128 0x34
 1239 00de 00       		.byte	0
 1240 00df 03       		.uleb128 0x3
 1241 00e0 0E       		.uleb128 0xe
 1242 00e1 3A       		.uleb128 0x3a
 1243 00e2 0B       		.uleb128 0xb
 1244 00e3 3B       		.uleb128 0x3b
 1245 00e4 0B       		.uleb128 0xb
 1246 00e5 49       		.uleb128 0x49
 1247 00e6 13       		.uleb128 0x13
 1248 00e7 02       		.uleb128 0x2
 1249 00e8 17       		.uleb128 0x17
 1250 00e9 00       		.byte	0
 1251 00ea 00       		.byte	0
 1252 00eb 10       		.uleb128 0x10
 1253 00ec 898201   		.uleb128 0x4109
 1254 00ef 00       		.byte	0
 1255 00f0 11       		.uleb128 0x11
 1256 00f1 01       		.uleb128 0x1
 1257 00f2 31       		.uleb128 0x31
 1258 00f3 13       		.uleb128 0x13
 1259 00f4 00       		.byte	0
 1260 00f5 00       		.byte	0
 1261 00f6 11       		.uleb128 0x11
 1262 00f7 1D       		.uleb128 0x1d
 1263 00f8 01       		.byte	0x1
 1264 00f9 31       		.uleb128 0x31
 1265 00fa 13       		.uleb128 0x13
 1266 00fb 11       		.uleb128 0x11
 1267 00fc 01       		.uleb128 0x1
 1268 00fd 12       		.uleb128 0x12
 1269 00fe 06       		.uleb128 0x6
 1270 00ff 58       		.uleb128 0x58
 1271 0100 0B       		.uleb128 0xb
 1272 0101 59       		.uleb128 0x59
 1273 0102 0B       		.uleb128 0xb
 1274 0103 00       		.byte	0
 1275 0104 00       		.byte	0
 1276 0105 12       		.uleb128 0x12
 1277 0106 1D       		.uleb128 0x1d
 1278 0107 00       		.byte	0
 1279 0108 31       		.uleb128 0x31
 1280 0109 13       		.uleb128 0x13
 1281 010a 11       		.uleb128 0x11
 1282 010b 01       		.uleb128 0x1
 1283 010c 12       		.uleb128 0x12
 1284 010d 06       		.uleb128 0x6
 1285 010e 58       		.uleb128 0x58
 1286 010f 0B       		.uleb128 0xb
 1287 0110 59       		.uleb128 0x59
 1288 0111 05       		.uleb128 0x5
 1289 0112 00       		.byte	0
 1290 0113 00       		.byte	0
 1291 0114 13       		.uleb128 0x13
 1292 0115 34       		.uleb128 0x34
 1293 0116 00       		.byte	0
 1294 0117 03       		.uleb128 0x3
 1295 0118 08       		.uleb128 0x8
 1296 0119 3A       		.uleb128 0x3a
 1297 011a 0B       		.uleb128 0xb
 1298 011b 3B       		.uleb128 0x3b
 1299 011c 05       		.uleb128 0x5
 1300 011d 49       		.uleb128 0x49
 1301 011e 13       		.uleb128 0x13
 1302 011f 3F       		.uleb128 0x3f
 1303 0120 19       		.uleb128 0x19
 1304 0121 3C       		.uleb128 0x3c
 1305 0122 19       		.uleb128 0x19
 1306 0123 00       		.byte	0
 1307 0124 00       		.byte	0
 1308 0125 14       		.uleb128 0x14
 1309 0126 35       		.uleb128 0x35
 1310 0127 00       		.byte	0
 1311 0128 49       		.uleb128 0x49
 1312 0129 13       		.uleb128 0x13
 1313 012a 00       		.byte	0
 1314 012b 00       		.byte	0
 1315 012c 15       		.uleb128 0x15
 1316 012d 34       		.uleb128 0x34
 1317 012e 00       		.byte	0
 1318 012f 03       		.uleb128 0x3
 1319 0130 0E       		.uleb128 0xe
 1320 0131 3A       		.uleb128 0x3a
 1321 0132 0B       		.uleb128 0xb
 1322 0133 3B       		.uleb128 0x3b
 1323 0134 05       		.uleb128 0x5
 1324 0135 49       		.uleb128 0x49
 1325 0136 13       		.uleb128 0x13
 1326 0137 3F       		.uleb128 0x3f
 1327 0138 19       		.uleb128 0x19
 1328 0139 3C       		.uleb128 0x3c
 1329 013a 19       		.uleb128 0x19
 1330 013b 00       		.byte	0
 1331 013c 00       		.byte	0
 1332 013d 00       		.byte	0
 1333              		.section	.debug_loc,"",%progbits
 1334              	.Ldebug_loc0:
 1335              	.LLST0:
 1336 0000 26000000 		.4byte	.LVL0-.Ltext0
 1337 0004 38000000 		.4byte	.LVL1-.Ltext0
 1338 0008 0100     		.2byte	0x1
 1339 000a 50       		.byte	0x50
 1340 000b 3A000000 		.4byte	.LVL2-.Ltext0
 1341 000f 3C000000 		.4byte	.LVL3-.Ltext0
 1342 0013 0100     		.2byte	0x1
 1343 0015 50       		.byte	0x50
 1344 0016 3C000000 		.4byte	.LVL3-.Ltext0
 1345 001a 46000000 		.4byte	.LVL4-.Ltext0
 1346 001e 0B00     		.2byte	0xb
 1347 0020 70       		.byte	0x70
 1348 0021 00       		.sleb128 0
 1349 0022 F7       		.byte	0xf7
 1350 0023 25       		.uleb128 0x25
 1351 0024 44       		.byte	0x44
 1352 0025 F7       		.byte	0xf7
 1353 0026 25       		.uleb128 0x25
 1354 0027 1B       		.byte	0x1b
 1355 0028 F7       		.byte	0xf7
 1356 0029 00       		.uleb128 0
 1357 002a 9F       		.byte	0x9f
 1358 002b 46000000 		.4byte	.LVL4-.Ltext0
 1359 002f 4A000000 		.4byte	.LVL5-.Ltext0
 1360 0033 0100     		.2byte	0x1
 1361 0035 50       		.byte	0x50
 1362 0036 00000000 		.4byte	0
 1363 003a 00000000 		.4byte	0
 1364              		.section	.debug_aranges,"",%progbits
 1365 0000 1C000000 		.4byte	0x1c
 1366 0004 0200     		.2byte	0x2
 1367 0006 00000000 		.4byte	.Ldebug_info0
 1368 000a 04       		.byte	0x4
 1369 000b 00       		.byte	0
 1370 000c 0000     		.2byte	0
 1371 000e 0000     		.2byte	0
 1372 0010 00000000 		.4byte	.Ltext0
 1373 0014 CC000000 		.4byte	.Letext0-.Ltext0
 1374 0018 00000000 		.4byte	0
 1375 001c 00000000 		.4byte	0
 1376              		.section	.debug_line,"",%progbits
 1377              	.Ldebug_line0:
 1378 0000 F1000000 		.section	.debug_str,"MS",%progbits,1
 1378      02009F00 
 1378      00000201 
 1378      FB0E0D00 
 1378      01010101 
 1379              	.LASF31:
 1380 0000 41484231 		.ascii	"AHB1LPENR\000"
 1380      4C50454E 
 1380      5200
 1381              	.LASF95:
 1382 000a 474E5520 		.ascii	"GNU C99 5.4.1 20160919 -mtune=cortex-m4 -mthumb -ma"
 1382      43393920 
 1382      352E342E 
 1382      31203230 
 1382      31363039 
 1383 003d 7263683D 		.ascii	"rch=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -g "
 1383      61726D76 
 1383      37652D6D 
 1383      202D6D66 
 1383      6C6F6174 
 1384 0070 2D4F3020 		.ascii	"-O0 -Os -std=gnu99 -fsingle-precision-constant\000"
 1384      2D4F7320 
 1384      2D737464 
 1384      3D676E75 
 1384      3939202D 
 1385              	.LASF74:
 1386 009f 54494D78 		.ascii	"TIMx_registers\000"
 1386      5F726567 
 1386      69737465 
 1386      727300
 1387              	.LASF38:
 1388 00ae 5F726573 		.ascii	"_reserved_0x6c\000"
 1388      65727665 
 1388      645F3078 
 1388      366300
 1389              	.LASF19:
 1390 00bd 41504231 		.ascii	"APB1RSTR\000"
 1390      52535452 
 1390      00
 1391              	.LASF24:
 1392 00c6 41484232 		.ascii	"AHB2ENR\000"
 1392      454E5200 
 1393              	.LASF85:
 1394 00ce 444D4152 		.ascii	"DMAR\000"
 1394      00
 1395              	.LASF70:
 1396 00d3 4A445232 		.ascii	"JDR2\000"
 1396      00
 1397              	.LASF71:
 1398 00d8 4A445233 		.ascii	"JDR3\000"
 1398      00
 1399              	.LASF10:
 1400 00dd 63686172 		.ascii	"char\000"
 1400      00
 1401              	.LASF77:
 1402 00e2 43434D52 		.ascii	"CCMR1\000"
 1402      3100
 1403              	.LASF78:
 1404 00e8 43434D52 		.ascii	"CCMR2\000"
 1404      3200
 1405              	.LASF3:
 1406 00ee 73686F72 		.ascii	"short int\000"
 1406      7420696E 
 1406      7400
 1407              	.LASF39:
 1408 00f8 42444352 		.ascii	"BDCR\000"
 1408      00
 1409              	.LASF46:
 1410 00fd 434B4741 		.ascii	"CKGATENR\000"
 1410      54454E52 
 1410      00
 1411              	.LASF40:
 1412 0106 5F726573 		.ascii	"_reserved_0x78\000"
 1412      65727665 
 1412      645F3078 
 1412      373800
 1413              	.LASF43:
 1414 0115 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1414      32534346 
 1414      475200
 1415              	.LASF42:
 1416 0120 53534347 		.ascii	"SSCGR\000"
 1416      5200
 1417              	.LASF68:
 1418 0126 4A535152 		.ascii	"JSQR\000"
 1418      00
 1419              	.LASF33:
 1420 012b 41484233 		.ascii	"AHB3LPENR\000"
 1420      4C50454E 
 1420      5200
 1421              	.LASF58:
 1422 0135 41444378 		.ascii	"ADCx_registers\000"
 1422      5F726567 
 1422      69737465 
 1422      727300
 1423              	.LASF14:
 1424 0144 43464752 		.ascii	"CFGR\000"
 1424      00
 1425              	.LASF26:
 1426 0149 5F726573 		.ascii	"_reserved_0x3c\000"
 1426      65727665 
 1426      645F3078 
 1426      336300
 1427              	.LASF29:
 1428 0158 5F726573 		.ascii	"_reserved_0x48\000"
 1428      65727665 
 1428      645F3078 
 1428      343800
 1429              	.LASF27:
 1430 0167 41504231 		.ascii	"APB1ENR\000"
 1430      454E5200 
 1431              	.LASF15:
 1432 016f 41484231 		.ascii	"AHB1RSTR\000"
 1432      52535452 
 1432      00
 1433              	.LASF51:
 1434 0178 4F545950 		.ascii	"OTYPER\000"
 1434      455200
 1435              	.LASF45:
 1436 017f 44434B43 		.ascii	"DCKCFGR\000"
 1436      46475200 
 1437              	.LASF99:
 1438 0187 72656164 		.ascii	"reading_potentiometer\000"
 1438      696E675F 
 1438      706F7465 
 1438      6E74696F 
 1438      6D657465 
 1439              	.LASF41:
 1440 019d 5F726573 		.ascii	"_reserved_0x7c\000"
 1440      65727665 
 1440      645F3078 
 1440      376300
 1441              	.LASF93:
 1442 01ac 4144435F 		.ascii	"ADC_common\000"
 1442      636F6D6D 
 1442      6F6E00
 1443              	.LASF30:
 1444 01b7 5F726573 		.ascii	"_reserved_0x4c\000"
 1444      65727665 
 1444      645F3078 
 1444      346300
 1445              	.LASF25:
 1446 01c6 41484233 		.ascii	"AHB3ENR\000"
 1446      454E5200 
 1447              	.LASF52:
 1448 01ce 4F535045 		.ascii	"OSPEEDR\000"
 1448      45445200 
 1449              	.LASF7:
 1450 01d6 6C6F6E67 		.ascii	"long long int\000"
 1450      206C6F6E 
 1450      6720696E 
 1450      7400
 1451              	.LASF53:
 1452 01e4 50555044 		.ascii	"PUPDR\000"
 1452      5200
 1453              	.LASF80:
 1454 01ea 43435231 		.ascii	"CCR1\000"
 1454      00
 1455              	.LASF5:
 1456 01ef 6C6F6E67 		.ascii	"long int\000"
 1456      20696E74 
 1456      00
 1457              	.LASF82:
 1458 01f8 43435233 		.ascii	"CCR3\000"
 1458      00
 1459              	.LASF83:
 1460 01fd 43435234 		.ascii	"CCR4\000"
 1460      00
 1461              	.LASF76:
 1462 0202 44494552 		.ascii	"DIER\000"
 1462      00
 1463              	.LASF54:
 1464 0207 42535252 		.ascii	"BSRR\000"
 1464      00
 1465              	.LASF47:
 1466 020c 44434B43 		.ascii	"DCKCFGR2\000"
 1466      46475232 
 1466      00
 1467              	.LASF50:
 1468 0215 4D4F4445 		.ascii	"MODER\000"
 1468      5200
 1469              	.LASF20:
 1470 021b 41504232 		.ascii	"APB2RSTR\000"
 1470      52535452 
 1470      00
 1471              	.LASF72:
 1472 0224 4A445234 		.ascii	"JDR4\000"
 1472      00
 1473              	.LASF87:
 1474 0229 656E6162 		.ascii	"enable_GPIOB\000"
 1474      6C655F47 
 1474      50494F42 
 1474      00
 1475              	.LASF61:
 1476 0236 4A4F4652 		.ascii	"JOFR1\000"
 1476      3100
 1477              	.LASF62:
 1478 023c 4A4F4652 		.ascii	"JOFR2\000"
 1478      3200
 1479              	.LASF63:
 1480 0242 4A4F4652 		.ascii	"JOFR3\000"
 1480      3300
 1481              	.LASF64:
 1482 0248 4A4F4652 		.ascii	"JOFR4\000"
 1482      3400
 1483              	.LASF75:
 1484 024e 534D4352 		.ascii	"SMCR\000"
 1484      00
 1485              	.LASF81:
 1486 0253 43435232 		.ascii	"CCR2\000"
 1486      00
 1487              	.LASF2:
 1488 0258 756E7369 		.ascii	"unsigned char\000"
 1488      676E6564 
 1488      20636861 
 1488      7200
 1489              	.LASF97:
 1490 0266 2F686F6D 		.ascii	"/home/etudiant/Bureau/CutiaMeaMuzicala_modular_v10 "
 1490      652F6574 
 1490      75646961 
 1490      6E742F42 
 1490      75726561 
 1491 0299 28636F6D 		.ascii	"(comentat)) (copie 1)\000"
 1491      656E7461 
 1491      74292920 
 1491      28636F70 
 1491      69652031 
 1492              	.LASF28:
 1493 02af 41504232 		.ascii	"APB2ENR\000"
 1493      454E5200 
 1494              	.LASF86:
 1495 02b7 656E6162 		.ascii	"enable_ADC1\000"
 1495      6C655F41 
 1495      44433100 
 1496              	.LASF98:
 1497 02c3 5F5F4453 		.ascii	"__DSB\000"
 1497      4200
 1498              	.LASF8:
 1499 02c9 6C6F6E67 		.ascii	"long long unsigned int\000"
 1499      206C6F6E 
 1499      6720756E 
 1499      7369676E 
 1499      65642069 
 1500              	.LASF12:
 1501 02e0 75696E74 		.ascii	"uint32_t\000"
 1501      33325F74 
 1501      00
 1502              	.LASF0:
 1503 02e9 756E7369 		.ascii	"unsigned int\000"
 1503      676E6564 
 1503      20696E74 
 1503      00
 1504              	.LASF16:
 1505 02f6 41484232 		.ascii	"AHB2RSTR\000"
 1505      52535452 
 1505      00
 1506              	.LASF73:
 1507 02ff 4144435F 		.ascii	"ADC_common_registers\000"
 1507      636F6D6D 
 1507      6F6E5F72 
 1507      65676973 
 1507      74657273 
 1508              	.LASF48:
 1509 0314 5243435F 		.ascii	"RCC_registers\000"
 1509      72656769 
 1509      73746572 
 1509      7300
 1510              	.LASF91:
 1511 0322 4750494F 		.ascii	"GPIOB\000"
 1511      4200
 1512              	.LASF57:
 1513 0328 41465248 		.ascii	"AFRH\000"
 1513      00
 1514              	.LASF96:
 1515 032d 7372632F 		.ascii	"src/sys/potentiometer.c\000"
 1515      7379732F 
 1515      706F7465 
 1515      6E74696F 
 1515      6D657465 
 1516              	.LASF13:
 1517 0345 504C4C43 		.ascii	"PLLCFGR\000"
 1517      46475200 
 1518              	.LASF56:
 1519 034d 4146524C 		.ascii	"AFRL\000"
 1519      00
 1520              	.LASF35:
 1521 0352 41504231 		.ascii	"APB1LPENR\000"
 1521      4C50454E 
 1521      5200
 1522              	.LASF84:
 1523 035c 42445452 		.ascii	"BDTR\000"
 1523      00
 1524              	.LASF18:
 1525 0361 5F726573 		.ascii	"_reserved_0x1c\000"
 1525      65727665 
 1525      645F3078 
 1525      316300
 1526              	.LASF69:
 1527 0370 4A445231 		.ascii	"JDR1\000"
 1527      00
 1528              	.LASF32:
 1529 0375 41484232 		.ascii	"AHB2LPENR\000"
 1529      4C50454E 
 1529      5200
 1530              	.LASF92:
 1531 037f 41444331 		.ascii	"ADC1\000"
 1531      00
 1532              	.LASF4:
 1533 0384 73686F72 		.ascii	"short unsigned int\000"
 1533      7420756E 
 1533      7369676E 
 1533      65642069 
 1533      6E7400
 1534              	.LASF94:
 1535 0397 54494D32 		.ascii	"TIM2\000"
 1535      00
 1536              	.LASF6:
 1537 039c 6C6F6E67 		.ascii	"long unsigned int\000"
 1537      20756E73 
 1537      69676E65 
 1537      6420696E 
 1537      7400
 1538              	.LASF79:
 1539 03ae 43434552 		.ascii	"CCER\000"
 1539      00
 1540              	.LASF34:
 1541 03b3 5F726573 		.ascii	"_reserved_0x5c\000"
 1541      65727665 
 1541      645F3078 
 1541      356300
 1542              	.LASF11:
 1543 03c2 5F5F7569 		.ascii	"__uint32_t\000"
 1543      6E743332 
 1543      5F7400
 1544              	.LASF23:
 1545 03cd 41484231 		.ascii	"AHB1ENR\000"
 1545      454E5200 
 1546              	.LASF49:
 1547 03d5 4750494F 		.ascii	"GPIO_registers\000"
 1547      5F726567 
 1547      69737465 
 1547      727300
 1548              	.LASF1:
 1549 03e4 7369676E 		.ascii	"signed char\000"
 1549      65642063 
 1549      68617200 
 1550              	.LASF100:
 1551 03f0 766F6C75 		.ascii	"volume\000"
 1551      6D6500
 1552              	.LASF37:
 1553 03f7 5F726573 		.ascii	"_reserved_0x68\000"
 1553      65727665 
 1553      645F3078 
 1553      363800
 1554              	.LASF9:
 1555 0406 73697A65 		.ascii	"sizetype\000"
 1555      74797065 
 1555      00
 1556              	.LASF90:
 1557 040f 636F6E66 		.ascii	"configuration_potentiometre_PB0\000"
 1557      69677572 
 1557      6174696F 
 1557      6E5F706F 
 1557      74656E74 
 1558              	.LASF89:
 1559 042f 73657475 		.ascii	"setup_ADC\000"
 1559      705F4144 
 1559      4300
 1560              	.LASF65:
 1561 0439 53515231 		.ascii	"SQR1\000"
 1561      00
 1562              	.LASF66:
 1563 043e 53515232 		.ascii	"SQR2\000"
 1563      00
 1564              	.LASF67:
 1565 0443 53515233 		.ascii	"SQR3\000"
 1565      00
 1566              	.LASF21:
 1567 0448 5F726573 		.ascii	"_reserved_0x28\000"
 1567      65727665 
 1567      645F3078 
 1567      323800
 1568              	.LASF17:
 1569 0457 41484233 		.ascii	"AHB3RSTR\000"
 1569      52535452 
 1569      00
 1570              	.LASF88:
 1571 0460 6D6F6469 		.ascii	"modify_volume_potentiometer\000"
 1571      66795F76 
 1571      6F6C756D 
 1571      655F706F 
 1571      74656E74 
 1572              	.LASF59:
 1573 047c 534D5052 		.ascii	"SMPR1\000"
 1573      3100
 1574              	.LASF60:
 1575 0482 534D5052 		.ascii	"SMPR2\000"
 1575      3200
 1576              	.LASF44:
 1577 0488 504C4C53 		.ascii	"PLLSAICFGR\000"
 1577      41494346 
 1577      475200
 1578              	.LASF55:
 1579 0493 4C434B52 		.ascii	"LCKR\000"
 1579      00
 1580              	.LASF36:
 1581 0498 41504232 		.ascii	"APB2LPENR\000"
 1581      4C50454E 
 1581      5200
 1582              	.LASF22:
 1583 04a2 5F726573 		.ascii	"_reserved_0x2c\000"
 1583      65727665 
 1583      645F3078 
 1583      326300
 1584              		.ident	"GCC: (15:5.4.1+svn241155-1) 5.4.1 20160919"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 potentiometer.c
     /tmp/cc3WXYyv.s:21     .text:0000000000000000 $t
     /tmp/cc3WXYyv.s:26     .text:0000000000000000 reading_potentiometer
     /tmp/cc3WXYyv.s:55     .text:000000000000001c $d
     /tmp/cc3WXYyv.s:59     .text:0000000000000020 $t
     /tmp/cc3WXYyv.s:64     .text:0000000000000020 modify_volume_potentiometer
     /tmp/cc3WXYyv.s:107    .text:0000000000000050 $d
     /tmp/cc3WXYyv.s:111    .text:0000000000000054 $t
     /tmp/cc3WXYyv.s:116    .text:0000000000000054 setup_ADC
     /tmp/cc3WXYyv.s:178    .text:000000000000009c $d
     /tmp/cc3WXYyv.s:184    .text:00000000000000a8 $t
     /tmp/cc3WXYyv.s:189    .text:00000000000000a8 configuration_potentiometre_PB0
     /tmp/cc3WXYyv.s:225    .text:00000000000000c4 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC1
TIM2
RCC
ADC_common
GPIOB
